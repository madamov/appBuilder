name: My app builder

on:
  pull_request_review:
     types: [submitted]
     branches:
       - main
       - develop
       - release
       
  workflow_dispatch:
     branches: 
       - main
       - develop
       - test

env:
  GH_TOKEN: ${{ secrets.MILANTOK }} # setting GH_TOKEN for the entire workflow

jobs:
  build-on-mac:
    runs-on: macos-latest
    outputs:
      out_mac: ${{ steps.step1.outputs.status }}
      release_tag: ${{ steps.step1.outputs.release_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install signing certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.MY_APPLE_CERTIFICATE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          P12_PASSWORD: ${{ secrets.MY_APPLE_CERT_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/my_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # get certificate from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          
      - id: envvarsseting
        name: Branch-based environment variables setting
        uses: iamtheyammer/branch-env-vars@v1.2.1
        with:
          SFTP_USER: |
            main: ${{secrets.UPLOAD_USER}}
            develop: builder4d
            test: ${{secrets.UPLOAD_TEST_USER}}
            release: ${{secrets.UPLOAD_USER}}

          SFTP_PASSWORD: |
            main: ${{secrets.UPLOAD_PASSWORD}}
            develop: idolize-roof-scud-rigour
            test: ${{secrets.UPLOAD_TEST_PASSWORD}}
            release: ${{secrets.UPLOAD_TEST_PASSWORD}}

          TESTME: |
            main: I am in main branch
            develop: I am in develop branch
            test: In test branch
            release: In release branch

      - id: step1
        name: Build Action Mac
        env:
          WHO_TO_TRUST: ${{secrets.MILANTOK}}
          RUNNER_ACTOR: ${{github.actor}}
          RUNNER: GIT
          BINARIES_USER: ${{secrets.BINARIES_USER}}
          BINARIES_PASSWORD: ${{secrets.BINARIES_PASSWORD}}
          UPLOAD_USER: ${SFTP_USER}
          UPLOAD_PASSWORD: ${SFTP_PASSWORD}
          REPO_BUILD_NUMBER: ${{ vars.APP_BUILDNUMBER }}
          REPO_VERSION: ${{ vars.APP_VERSION }}
          TEST_USER: ${{secrets.UPLOAD_TEST_USER}}
          TEST_PASSWORD: ${{secrets.UPLOAD_TEST_PASSWORD}}
          
        run: |
         pwd
         if [ "$(basename $GITHUB_REF)" == "release" ]; then
            # Use test server for uploads
            echo Using release branch server parameters
            mv ./buildFiles/parameters_releases.json ./buildFiles/parameters.json
         fi
         if [ "$(basename $GITHUB_REF)" == "test" ]; then
            # Use test server for uploads
            echo Using test server parameters for branch test
            mv ./buildFiles/parameters_testserver.json ./buildFiles/parameters.json
         fi
         if [ "$(basename $GITHUB_REF)" == "develop" ]; then
            # Use test server for uploads
            echo Using test server parameters for branch develop
            mv ./buildFiles/parameters_testserver.json ./buildFiles/parameters.json
         fi
         
         # install curl from Homebrew
         # brew install curl
         
         # test SFTP credentials
         ./buildFiles/scripts/test_curl.sh
         
         # /usr/local/opt/curl/bin/curl -k -s -u ${UPLOAD_USER}:${UPLOAD_PASSWORD} --ftp-create-dirs -T $thisBuildDestinationFolder/${appName}.dmg ${myStructURL}/${appName}.dmg

         
         # get project name from a 4DProject filename
         project4DFile=$(find ./Project -type f -name "*.4DProject")
         projectName=$(basename $project4DFile ".4DProject")
         
         next_build=$(jq -r '.build' ./buildFiles/parameters.json)
         echo "artifacts_path=$HOME/Documents/$nextbuild/artifacts" >> $GITHUB_ENV

         # ./buildFiles/scripts/build_all.sh
         
         STATUSFILE=/Users/runner/Documents/$nextbuild/artifacts/status.log
         if [[ -f "$STATUSFILE" ]]; then
           msg="*Compilation or build failed!* at $(date)"
           echo "status=FAIL" >> "$GITHUB_OUTPUT"
         else
           # ./buildFiles/scripts/postBuild.sh
           echo "🐚: POSTBUILD done at $(date)"
           msg="**macOS Build of version $version build $buildnumber successful!** at $(date)"
           # set output so the next runner will know that we are succesful
           echo "status=OK" >> "$GITHUB_OUTPUT"
         fi

      - uses: actions/upload-artifact@v4
        with:
         name: 'Uploading macOS artifacts'
         # path: /Users/runner/Documents/$(nextbuild)/artifacts/           
         path: ${{ env.artifacts_path }}           

  build-on-windows:
    if: ${{ needs.build-on-mac.outputs.out_mac=='OK' }}
    needs: build-on-mac
    runs-on: windows-latest
    outputs:
      out_win: ${{ steps.step2.outputs.status }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - id: step1
        name: Build Action Windows
        env:
          WHO_TO_TRUST: ${{secrets.MILANTOK}}
          RUNNER_ACTOR: ${{github.actor}}
          RUNNER: GIT
          BINARIES_USER: ${{secrets.BINARIES_USER}}
          BINARIES_PASSWORD: ${{secrets.BINARIES_PASSWORD}}
          UPLOAD_USER: ${{secrets.UPLOAD_USER}}
          UPLOAD_PASSWORD: ${{secrets.UPLOAD_PASSWORD}}
          RELEASE_TAG: ${{ needs.build-on-mac.outputs.release_tag }}
          REPO_BUILD_NUMBER: ${{ vars.APP_BUILDNUMBER }}
          REPO_VERSION: ${{ vars.APP_VERSION }}
          
        run: |
           # ./buildFiles/scripts/mainyml.bat

      - id: step2
        name: Checking for status file
        run: |
          $STATUSFILE="C:\Users\runneradmin\Documents\artifacts\status.log"
          if([System.IO.File]::Exists($STATUSFILE)) {
            echo status=FAIL >> $env:GITHUB_OUTPUT
             } else {
            echo status=OK >> $env:GITHUB_OUTPUT           
           }
        shell: pwsh


      - uses: actions/upload-artifact@v3
        with:
         name: 'Uploading Windows artifacts'
         path: C:\Users\runneradmin\Documents\artifacts\


  increase_build_number:
    needs: [build-on-mac, build-on-windows]
    if: ${{ needs.build-on-windows.outputs.out_win=='OK' }} 
    runs-on: ubuntu-latest
    steps:
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Install curl using Homebrew
        run: brew install curl

      - uses: actions/checkout@v4
      - name: Increase build number
        env:
          WHO_TO_TRUST: ${{secrets.MYTOKEN}}
          RUNNER: GIT
          OUTPUT1: ${{ needs.build-on-mac.outputs.out_mac }}
          OUTPUT2: ${{ needs.build-on-windows.outputs.out_win }}
          RELEASE_TAG: ${{ needs.build-on-mac.outputs.release_tag }}
          UPLOAD_USER: ${{secrets.UPLOAD_USER}}
          UPLOAD_PASSWORD: ${{secrets.UPLOAD_PASSWORD}}
          REPO_BUILD_NUMBER: ${{ vars.APP_BUILDNUMBER }}
          REPO_VERSION: ${{ vars.APP_VERSION }}
          
        run: |
          echo "Running build number increase job, release is $RELEASE"
          echo "OUTPUT2 (out_win)  is : $OUTPUT2"
          echo "OUTPUT1 (out_mac)  is : $OUTPUT1"
          ryver_version=$(jq -r '.version' ./buildFiles/parameters.json)
          ryver_build=$(jq -r '.build' ./buildFiles/parameters.json)
          
          # ./buildFiles/scripts/incbuildnumber.sh
 
          echo RYVER VERSIONS
          echo $ryver_version
          echo $ryver_build 
          
           # set new build number in repository variable
           
           REPO_BUILD_NUMBER=$((REPO_BUILD_NUMBER+1))
           gh variable list
           gh variable set APP_BUILDNUMBER --body "$REPO_BUILD_NUMBER"
           gh variable list


          msg="**Build of version ${ryver_version} build ${ryver_build} successful!** at $(date)"
          
          if [ "$(basename $GITHUB_REF)" == "main" ]; then
            # Build and deploy production code
            curl -X "POST" "https://clearviewsys.ryver.com/application/webhook/jeF3RLWy7EokK5G" -H "Content-Type: text/plain; charset=utf-8" -d "$msg"
          fi
