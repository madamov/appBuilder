name: myApp builder

on:
  workflow_dispatch:
     branches: 
       - main
       - develop
       - test

concurrency:
   group: ${{ github.workflow }}
   
env:
  GH_TOKEN: ${{ secrets.MILANTOK }} # setting GH_TOKEN for the entire workflow

jobs:
  build-on-mac:
    runs-on: macos-13
    outputs:
      out_mac: ${{ steps.step1.outputs.status }}
      client_passed: ${{ steps.step1.outputs.passed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install signing certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.MY_APPLE_CERTIFICATE }}
          P12_PASSWORD: ${{ secrets.MY_APPLE_CERT_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/cxr.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          
      - id: step1
        name: Build Action Mac
        
        env:
          RUNNER_ACTOR: ${{github.actor}}
          RUNNER: GIT
          BINARIES_USER: ${{secrets.BINARIES_USER}}
          BINARIES_PASSWORD: ${{secrets.BINARIES_PASSWORD}}
          REPO_BUILD_NUMBER: ${{ vars.APP_BUILD_NUMBER }}
          REPO_VERSION: ${{ vars.APP_VERSION }}
          DEV_LIC: ${{secrets.DEV_MAC}}
          
        run: |
         
         if [ "$(basename $GITHUB_REF)" == "test" ]; then
            # Use test server for uploads
            echo "Using test server parameters for branch $(basename $GITHUB_REF)"
            cp -f ./buildFiles/parameters_testserver.json ./buildFiles/parameters.json
            cat ./buildFiles/parameters.json
            export UPLOAD_USER=${{ secrets.UPLOAD_TEST_USER }}
            export UPLOAD_PASSWORD=${{ secrets.UPLOAD__TEST_PASSWORD }}
         fi
         if [ "$(basename $GITHUB_REF)" == "release" ]; then
            # Use release server for uploads
            echo Using release branch server parameters
            cp -f ./buildFiles/parameters_releases.json ./buildFiles/parameters.json
            export UPLOAD_USER=${{ secrets.UPLOAD_USER }}
            export UPLOAD_PASSWORD=${{ secrets.UPLOAD_PASSWORD }}
         fi
         if [ "$(basename $GITHUB_REF)" == "develop" ]; then
            cp -f ./buildFiles/parameters_testserver.json ./buildFiles/parameters.json
            export UPLOAD_USER=${{ secrets.UPLOAD_TEST_USER }}
            export UPLOAD_PASSWORD=${{ secrets.UPLOAD_TEST_PASSWORD }}
         fi
         if [ "$(basename $GITHUB_REF)" == "main" ]; then
            cp -f ./buildFiles/parameters_main.json ./buildFiles/parameters.json
            export UPLOAD_USER=${{ secrets.UPLOAD_USER }}
            export UPLOAD_PASSWORD=${{ secrets.UPLOAD_PASSWORD }}
         fi
          
         ./buildFiles/scripts/build_all.sh
         
         STATUSFILE=/Users/runner/Documents/artifacts/status.log
         if [[ -f "$STATUSFILE" ]]; then
           msg="*Compilation or build failed!* at $(date)"
           echo "status=FAIL" >> "$GITHUB_OUTPUT"
         else
           ./buildFiles/scripts/postBuild.sh
           echo "🐚: POSTBUILD done at $(date)"
           msg="**macOS Build of version $version build $buildnumber successful!** at $(date)"
           # set output so the next runner will know if we are succesful
           echo "status=OK" >> "$GITHUB_OUTPUT"
         fi

      - name: 'Upload macOS client archive'
        uses: actions/upload-artifact@v4.3.3
        with:
          name: macos-client-archive
          path: /Users/runner/Documents/update.mac.4darchive
          if-no-files-found: warn
          compression-level: 0 # no compression, already compressed by 4D
          retention-days: 2

      - uses: actions/upload-artifact@v4.3.3
        with:
         name: 'Uploading macOS artifacts'
         path: /Users/runner/Documents/artifacts/           

  build-on-windows:
    if: ${{ needs.build-on-mac.outputs.out_mac=='OK' }}
    needs: build-on-mac
    runs-on: windows-latest
    outputs:
      out_win: ${{ steps.step2.outputs.status }}
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download a macOS client archive
        uses: actions/download-artifact@v4.1.7
        with:
          name: macos-client-archive
          path: C:\Users\runneradmin\Documents\update.mac.4darchive
          
      - id: step1
        name: Build Action Windows
        timeout-minutes: 45

        env:
          RUNNER_ACTOR: ${{github.actor}}
          RUNNER: GIT
          BINARIES_USER: ${{secrets.BINARIES_USER}}
          BINARIES_PASSWORD: ${{secrets.BINARIES_PASSWORD}}
          MYBRANCH: ${{github.ref}}
          REPO_BUILD_NUMBER: ${{ vars.APP_BUILD_NUMBER }}
          REPO_VERSION: ${{ vars.APP_VERSION }}
          UPLOAD_REL_USER: ${{ secrets.UPLOAD_USER }}
          UPLOAD_REL_PASSWORD: ${{ secrets.UPLOAD_PASSWORD }}
          UPLOAD_TEST_USER: ${{ secrets.UPLOAD_TEST_USER }}
          UPLOAD_TEST_PASSWORD: ${{ secrets.UPLOAD_TEST_PASSWORD }}
          DEV_LIC: ${{secrets.DEV_WIN}}

        run: |
          if [%MYBRANCH%] == [refs/heads/test] (copy /y buildFiles\parameters_testserver.json  buildFiles\parameters.json)
          if [%MYBRANCH%] == [refs/heads/develop] (copy /y buildFiles\parameters_testserver.json  buildFiles\parameters.json)
          if [%MYBRANCH%] == [refs/heads/main] (copy /y buildFiles\parameters_releases.json  buildFiles\parameters.json)

          if [%MYBRANCH%] == [refs/heads/test] (set UPLOAD_USER=%UPLOAD_TEST_USER%)
          if [%MYBRANCH%] == [refs/heads/test] (set UPLOAD_PASSWORD=%UPLOAD_TEST_PASSWORD%)
              
          if [%MYBRANCH%] == [refs/heads/develop] (set UPLOAD_USER=%UPLOAD_TEST_USER%)
          if [%MYBRANCH%] == [refs/heads/develop] (set UPLOAD_PASSWORD=%UPLOAD_TEST_PASSWORD%)

          if [%MYBRANCH%] == [refs/heads/main] (set UPLOAD_USER=%UPLOAD_REL_USER%)
          if [%MYBRANCH%] == [refs/heads/main] (set UPLOAD_PASSWORD=%UPLOAD_REL_PASSWORD%)
          
          ./buildFiles/scripts/mainyml.bat

        shell: cmd
        
      - id: step2
        name: Checking for status file
        run: |
          $STATUSFILE="C:\Users\runneradmin\Documents\artifacts\status.log"
          if([System.IO.File]::Exists($STATUSFILE)) {
            echo status=FAIL >> $env:GITHUB_OUTPUT
             } else {
            echo status=OK >> $env:GITHUB_OUTPUT           
           }
        shell: pwsh


      - uses: actions/upload-artifact@v4.3.3
        with:
         name: 'Uploading Windows artifacts'
         path: C:\Users\runneradmin\Documents\artifacts\


  increase_build_number:
    needs: [build-on-mac, build-on-windows]
    if: ${{ needs.build-on-windows.outputs.out_win=='OK' }} 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Increase build number
        env:
          RUNNER: GIT
          REPO_BUILD_NUMBER: ${{ vars.APP_BUILD_NUMBER }}
          REPO_VERSION: ${{ vars.APP_VERSION }}
                   
        run: |
         
          # set new build number in repository variable
           
          REPO_BUILD_NUMBER=$((REPO_BUILD_NUMBER+1))
          echo "new build number in repo var is $REPO_BUILD_NUMBER"
          gh variable list
          gh variable set APP_BUILD_NUMBER --body "$REPO_BUILD_NUMBER"
          gh variable list
          
