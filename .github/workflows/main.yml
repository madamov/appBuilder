name: CXR builder

on:
  push:
    branches: 
      # - main
  workflow_dispatch:
     branches: 
       - main
       - develop
       - ma_github_actions_builder
  # schedule:
    # - cron: '30 4 * * *' #build every day at 4:30 UTC
env:
  GH_TOKEN: ${{ secrets.MILANTOK }} # setting GH_TOKEN for the entire workflow

jobs:
  build-on-mac:
    runs-on: macos-latest
    outputs:
      out_mac: ${{ steps.step1.outputs.status }}
      release_tag: ${{ steps.step1.outputs.release_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install signing certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.MACOS_ADHOC_CERTIFICATE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo in certificate installation
          pwd
          # create variables
          # CERTIFICATE_PATH=$RUNNER_TEMP/cxr.cer
          # KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate from secrets
          # echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # create temporary keychain
          # security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          # security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          # security import $CERTIFICATE_PATH -A -t cert -k $KEYCHAIN_PATH
          # security list-keychain -d user -s $KEYCHAIN_PATH

      - id: step1
        name: Build Action Mac
        env:
          WHO_TO_TRUST: ${{secrets.MILANTOK}}
          RUNNER_ACTOR: ${{github.actor}}
          RUNNER: GIT
          BINARIES_USER: ${{secrets.BINARIES_USER}}
          BINARIES_PASSWORD: ${{secrets.BINARIES_PASSWORD}}
          UPLOAD_USER: ${{secrets.UPLOAD_USER}}
          UPLOAD_PASSWORD: ${{secrets.UPLOAD_PASSWORD}}
          
# env:  MY_ENV_VAR: ${{ github.ref == 'refs/heads/main' && 'value_for_main_branch' || 'value_for_other_branches' }}

        run: |
         pwd
         if [ "$(basename $GITHUB_REF)" == "ma_github_actions_builder" ]; then
            # Use test server for uploads
            echo Using test server parameters
            mv ./buildFiles/parameters_testserver.json ./buildFiles/parameters.json
         fi
         pwd
         ./buildFiles/scripts/build_all.sh
         STATUSFILE=/Users/runner/Documents/artifacts/status.log
         if [[ -f "$STATUSFILE" ]]; then
           msg="*Compilation or build failed!* at $(date)"
           echo "status=FAIL" >> "$GITHUB_OUTPUT"
         else
           ./buildFiles/scripts/postBuild.sh
           echo "🐚: POSTBUILD done at $(date)"
           msg="**macOS Build of version $version build $buildnumber successful!** at $(date)"
           # set output so the next runner will know if we are succesful
           echo "status=OK" >> "$GITHUB_OUTPUT"
         fi

      - uses: actions/upload-artifact@v4
        with:
         name: 'Uploading macOS artifacts'
         path: /Users/runner/Documents/artifacts/           

  build-on-windows:
    if: ${{ needs.build-on-mac.outputs.out_mac=='OK' }}
    needs: build-on-mac
    runs-on: windows-latest
    outputs:
      out_win: ${{ steps.step2.outputs.status }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - id: step1
        name: Build Action Windows
        env:
          WHO_TO_TRUST: ${{secrets.MILANTOK}}
          RUNNER_ACTOR: ${{github.actor}}
          RUNNER: GIT
          BINARIES_USER: ${{secrets.BINARIES_USER}}
          BINARIES_PASSWORD: ${{secrets.BINARIES_PASSWORD}}
          UPLOAD_USER: ${{secrets.UPLOAD_USER}}
          UPLOAD_PASSWORD: ${{secrets.UPLOAD_PASSWORD}}
          RELEASE_TAG: ${{ needs.build-on-mac.outputs.release_tag }}
        run: |
         ./buildFiles/scripts/mainyml.bat

      - id: step2
        name: Checking for status file
        run: |
          $STATUSFILE="C:\Users\runneradmin\Documents\artifacts\status.log"
          if([System.IO.File]::Exists($STATUSFILE)) {
            echo status=FAIL >> $env:GITHUB_OUTPUT
             } else {
            echo status=OK >> $env:GITHUB_OUTPUT           
           }
        shell: pwsh


      - uses: actions/upload-artifact@v3
        with:
         name: 'Uploading Windows artifacts'
         path: C:\Users\runneradmin\Documents\artifacts\


  increase_build_number:
    needs: [build-on-mac, build-on-windows]
    if: ${{ needs.build-on-windows.outputs.out_win=='OK' }} 
    runs-on: ubuntu-latest
    steps:
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Install curl using Homebrew
        run: brew install curl

      - uses: actions/checkout@v3
      - name: Increase build number
        env:
          WHO_TO_TRUST: ${{secrets.MYTOKEN}}
          RUNNER: GIT
          OUTPUT1: ${{ needs.build-on-mac.outputs.out_mac }}
          OUTPUT2: ${{ needs.build-on-windows.outputs.out_win }}
          RELEASE_TAG: ${{ needs.build-on-mac.outputs.release_tag }}
          UPLOAD_USER: ${{secrets.UPLOAD_USER}}
          UPLOAD_PASSWORD: ${{secrets.UPLOAD_PASSWORD}}
        run: |
          echo "Running build number increase job, release is $RELEASE"
          echo "OUTPUT2 (out_win)  is : $OUTPUT2"
          echo "OUTPUT1 (out_mac)  is : $OUTPUT1"
          ryver_version=$(jq -r '.version' ./buildFiles/parameters.json)
          ryver_build=$(jq -r '.build' ./buildFiles/parameters.json)
          
          ./buildFiles/scripts/incbuildnumber.sh
 
          echo RYVER VERSIONS
          echo $ryver_version
          echo $ryver_build 
          
          msg="**Build of version ${ryver_version} build ${ryver_build} successful!** at $(date)"
          
          if [ "$(basename $GITHUB_REF)" == "main" ]; then
            # Build and deploy production code
            curl -X "POST" "https://clearviewsys.ryver.com/application/webhook/jeF3RLWy7EokK5G" -H "Content-Type: text/plain; charset=utf-8" -d "$msg"
          fi
