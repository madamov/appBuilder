name: My app builder

on:
  pull_request_review:
     types: [submitted]
     branches:
       - main
       - develop
       - release
       
  workflow_dispatch:
     branches: 
       - main
       - develop
       - test

env:
  GH_TOKEN: ${{ secrets.MILANTOK }} # setting GH_TOKEN for the entire workflow

jobs:
  build-on-mac:
    runs-on: macos-latest
    outputs:
      out_mac: ${{ steps.step1.outputs.status }}
      release_tag: ${{ steps.step1.outputs.release_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install signing certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.MY_APPLE_CERTIFICATE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          P12_PASSWORD: ${{ secrets.MY_APPLE_CERT_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/my_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # get certificate from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH


      - id: step1
        name: Build Action Mac
        env:
          WHO_TO_TRUST: ${{secrets.MILANTOK}}
          RUNNER_ACTOR: ${{github.actor}}
          RUNNER: GIT
          BINARIES_USER: ${{secrets.BINARIES_USER}}
          BINARIES_PASSWORD: ${{secrets.BINARIES_PASSWORD}}
          REPO_BUILD_NUMBER: ${{ vars.APP_BUILD_NUMBER }}
          REPO_VERSION: ${{ vars.APP_VERSION }}
          
        run: |
         
         ls -al > /Users/runner/Documents/client.txt

         # ./buildFiles/scripts/set_parameters_for_branch.sh
         
         # get project name from a 4DProject filename
         project4DFile=$(find ./Project -type f -name "*.4DProject")
         projectName=$(basename $project4DFile ".4DProject")
         
         # next_build=$REPO_BUILD_NUMBER
         echo "artifacts_path=$HOME/Documents/$REPO_BUILD_NUMBER/artifacts" >> $GITHUB_ENV
         mkdir $HOME/Documents/$REPO_BUILD_NUMBER
         mkdir $HOME/Documents/$REPO_BUILD_NUMBER/artifacts
         echo $project4DFile___$projectName > $HOME/Documents/$REPO_BUILD_NUMBER/artifacts/project_info.txt
         # ./buildFiles/scripts/build_all.sh
         echo {\"version\": \"$REPO_VERSION\", \"buildNumber\": $REPO_BUILD_NUMBER} > $HOME/Documents/$REPO_BUILD_NUMBER/artifacts\version_direct.json
         
         STATUSFILE=$HOME/Documents/$REPO_BUILD_NUMBER/artifacts/status.log
         
         if [[ -f "$STATUSFILE" ]]; then
           msg="*Compilation or build failed!* at $(date)"
           echo "status=FAIL" >> "$GITHUB_OUTPUT"
         else
           # ./buildFiles/scripts/postBuild.sh
           echo "🐚: POSTBUILD done at $(date)"
           msg="**macOS Build of version $version build $buildnumber successful!** at $(date)"
           # set output so the next runner will know that we are succesful
           echo "status=OK" >> "$GITHUB_OUTPUT"
         fi


      - name: 'Upload macOS client archive'
        uses: actions/upload-artifact@v4
        with:
          name: macos-client-archive
          path: /Users/runner/Documents/client.txt
          retention-days: 2

      - uses: actions/upload-artifact@v4
        with:
          name: 'Uploading macOS artifacts'
          path: ${{ env.artifacts_path }}           

  build-on-windows:
    if: ${{ needs.build-on-mac.outputs.out_mac=='OK' }}
    needs: build-on-mac
    runs-on: windows-latest
    outputs:
      out_win: ${{ steps.step2.outputs.status }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download a single artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-client-archive
          path: client.txt
    
      - id: step1
        name: Build Action Windows
        env:
          WHO_TO_TRUST: ${{secrets.MILANTOK}}
          RUNNER_ACTOR: ${{github.actor}}
          RUNNER: GIT
          BINARIES_USER: ${{secrets.BINARIES_USER}}
          BINARIES_PASSWORD: ${{secrets.BINARIES_PASSWORD}}
          RELEASE_TAG: ${{ needs.build-on-mac.outputs.release_tag }}
          REPO_BUILD_NUMBER: ${{ vars.APP_BUILD_NUMBER }}
          REPO_VERSION: ${{ vars.APP_VERSION }}
          
        run: |
          echo ON
          mkdir %HOMEPATH%\artifacts\
          echo %HOMEPATH%
          mkdir %HOMEPATH%\artifacts\
          
          dir \s C:\Users\*.* > %HOMEPATH%\artifacts\list.txt
          
          ./buildFiles/scripts/setenvvars.bat
          
          @echo off
          (
            echo { 
            echo   "name": "John Doe", 
            echo   "age": 30, 
            echo   "city": "New York" 
            echo }
           ) > %HOMEPATH%\artifacts\data.json
          
        shell: cmd
        
      - id: step_bash
        name: in_bash_shell
        shell: bash
        run: |
          echo {\"version\": \"$REPO_VERSION\", \"buildNumber\": $REPO_BUILD_NUMBER} > "\Users\runneradmin\artifacts\version.json"

      - id: step2
        name: Checking for status file
        run: |
          $STATUSFILE="C:\Users\runneradmin\Documents\artifacts\status.log"
          if([System.IO.File]::Exists($STATUSFILE)) {
            echo status=FAIL >> $env:GITHUB_OUTPUT
             } else {
            echo status=OK >> $env:GITHUB_OUTPUT           
           }
        shell: pwsh


      - uses: actions/upload-artifact@v4
        with:
         name: 'Uploading Windows artifacts'
         path: \Users\runneradmin\artifacts\


  increase_build_number:
    needs: [build-on-mac, build-on-windows]
    if: ${{ needs.build-on-windows.outputs.out_win=='OK' }} 
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v4
      
      - name: Increase build number
        env:
          WHO_TO_TRUST: ${{secrets.MYTOKEN}}
          RUNNER: GIT
          OUTPUT1: ${{ needs.build-on-mac.outputs.out_mac }}
          OUTPUT2: ${{ needs.build-on-windows.outputs.out_win }}
          RELEASE_TAG: ${{ needs.build-on-mac.outputs.release_tag }}
          REPO_BUILD_NUMBER: ${{ vars.APP_BUILD_NUMBER }}
          REPO_VERSION: ${{ vars.APP_VERSION }}
          
        run: |
          echo "Running build number increase job, release is $RELEASE"
          echo "OUTPUT2 (out_win)  is : $OUTPUT2"
          echo "OUTPUT1 (out_mac)  is : $OUTPUT1"
          
          ./buildFiles/scripts/set_parameters_for_branch.sh
          
          # ./buildFiles/scripts/incbuildnumber.sh
          
           # set new build number in repository variable
           
           REPO_BUILD_NUMBER=$((REPO_BUILD_NUMBER+1))
           echo "New build number will be $REPO_BUILD_NUMBER"
           gh variable list
           gh variable set APP_BUILD_NUMBER --body "$REPO_BUILD_NUMBER"
           gh variable list

